    /**
     * Rounding a double (StackOverflow)
     *
     * @param value  set double
     * @param places set how much symbols it is needed to round
     */
    public double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        long factor = (long) Math.pow(10, places);
        value = value * factor;
        long tmp = Math.round(value);
        return (double) tmp / factor;
    }
    
    public String round(double value) {
        String strDouble = String.format("%.2f", value);
        return strDouble;
    }
    
    public String round(double value) {
        DecimalFormat df = new DecimalFormat("#.##");
        String formatted = df.format(value);
    }

    /**
     * Scroll page to id element. By CSS
     *
     * @param idElement set id element for scroll to.
     * @apiNote #element, .element.
     */
    public void scrollByID(String idElement) {
        $(idElement).scrollIntoView(false);
        $(idElement).scrollIntoView("{block: \"end\"}");
    }

    /**
     * Scroll page to id element. By xPath
     *
     * @param xPathElement set element id
     */
    public void scrollByXPath(String xPathElement) {
        $x("//*[@id=" + "\"" + xPathElement + "\"" + "]").scrollIntoView(false);
        $x("//*[@id=" + "\"" + xPathElement + "\"" + "]").scrollIntoView("{block: \"end\"}");
    }

    /**
     * Start timer.
     */
    public int startTimer() {
        int start = java.time.LocalTime.now().toSecondOfDay();
        System.out.println("Timer started");
        return start;
    }

    /**
     * Stop timer.
     *
     * @param startTime get int - per seconds of the day.
     */
    public void stopTimer(int startTime) {
        int stopTime = java.time.LocalTime.now().toSecondOfDay();
        if ((stopTime - startTime) <= 60) {
            System.out.println("The process has taken: " + (stopTime - startTime) + " sec");
        } else {
            int min = (int) TimeUnit.SECONDS.toMinutes(stopTime - startTime);
            System.out.println("The process has taken: " + min + " min " + ((stopTime - startTime) - min * 60) + " sec");
        }
    }

    /**
     * @return current day number
     */
    public static int returnCurrentDayNumberOfWeek() {
        Calendar calendar = Calendar.getInstance();
        calendar.setFirstDayOfWeek(Calendar.MONDAY);
        return calendar.get(Calendar.DAY_OF_WEEK);
    }

    /**
     * @return current day name
     */
    public static String returnCurrentDayName() {
        Calendar calendar = Calendar.getInstance();
        Date date = calendar.getTime();
        return new SimpleDateFormat("EEEE", Locale.ENGLISH).format(date.getTime());
    }

    /**
     * Create future date in format dd.MM.yyyy
     *
     * @param howDaysAddToCurrentDate days quantity
     * @return date dd.MM.yyyy
     */
    public static String returnFutureDate(int howDaysAddToCurrentDate) {
        DateFormat format = new SimpleDateFormat("dd.MM.yyyy");
        Calendar calendar = Calendar.getInstance();

        calendar.setTime(new Date());
        calendar.add(Calendar.DATE, howDaysAddToCurrentDate);
        return format.format(calendar.getTimeInMillis());
    }

    /**
     * Get current date dd.MM.yyyy
     */
    public static String returnCurrentDate() {
        DateFormat format = new SimpleDateFormat("dd.MM.yyyy");
        Calendar calendar = Calendar.getInstance();
        return format.format(calendar.getTimeInMillis());
    }

    /**
     * Get current date MM.yyyy
     */
    public static String returnCurrentMonthYear() {
        DateFormat format = new SimpleDateFormat("MM.yyyy");
        Calendar calendar = Calendar.getInstance();
        return format.format(calendar.getTimeInMillis());
    }

    /**
     * Get current date dd.MM.yyyy
     */
    public static String returnPastDate(int howDaysSubtractFromCurrentDate) {
        int date = -howDaysSubtractFromCurrentDate;
        DateFormat format = new SimpleDateFormat("dd.MM.yyyy");
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        calendar.add(Calendar.DATE, date);

        return format.format(calendar.getTimeInMillis());
    }

    /**
     * return current Month name - January, February ...
     */
    public static String returnCurrentMonthName() {
        DateFormat format = new SimpleDateFormat("MMMM", Locale.US);
        Calendar calendar = Calendar.getInstance();

        return format.format(calendar.getTimeInMillis());
    }

    /**
     * return current month number - 01, 02 ...
     */
    public static String returnCurrentMonthNumber() {
        DateFormat format = new SimpleDateFormat("MM");
        Calendar calendar = Calendar.getInstance();

        return format.format(calendar.getTimeInMillis());
    }

    /**
     * return current year - 2020
     */
    public static String returnCurrentYear() {
        DateFormat format = new SimpleDateFormat("yyyy");
        Calendar calendar = Calendar.getInstance();

        return format.format(calendar.getTimeInMillis());
    }
    
    /**
     * @param amount add space: "1234567890.10" => "1 234 567 890.10"
     */
    public String changeDisplayingFormat(String amount) {
        if (!amount.contains(".")) {
            amount = amount + ".00"; // add .00 to amount
        }
        int l = amount.length() - 3; // amount - .00 (3 symbols)
        String end = amount.substring(l, amount.length());
        String s = " "; // space

        if (l == 4 || l == 7 || l == 10) {
            char first = amount.toCharArray()[0]; // first symbol.
            String one4 = amount.substring(1, 4); // 1,2,3 symbols
            String four7 = amount.substring(4, 7); // 4,5,6 symbols

            if (l == 4) return first + s + one4 + end; // last three symbols ".00"
            if (l == 7) return first + s + one4 + s + four7 + end;

            String seven10 = amount.substring(7, 10);
            return first + s + one4 + s + four7 + seven10 + end;
        } else if (l == 5 || l == 8) {
            String zero2 = amount.substring(0, 2);
            String two5 = amount.substring(2, 5);
            String five8 = amount.substring(5, 8);

            if (l == 5) return zero2 + s + two5 + end;
            return zero2 + s + two5 + s + five8 + end;
        } else if (l == 6 || l == 9) {
            String zero3 = amount.substring(0, 3);
            String three6 = amount.substring(3, 6);
            String five8 = amount.substring(6, 9);

            if (l == 6) return zero3 + s + three6 + end;
            return zero3 + s + three6 + s + five8 + end;
        }
        return amount;
    }
